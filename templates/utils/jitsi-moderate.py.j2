#!/usr/bin/env python3

import sys
if sys.version_info.major == 2:
    raise Exception("run with python3 you idiot")

import random
import socket
import time
import xmltodict
import json
import traceback

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(("localhost", 5582))

def recvuntil(a):
    buf = b''
    while a not in buf:
        buf += sock.recv(1)
    return buf

def cmd(c):
    split = "split_{}_{}".format(time.time(), random.randrange(8192)).encode()
    sock.send(b'\n"%s"\n' % split)
    recvuntil(split)
    sock.send(c.encode() + b'\n')
    sock.send(b'\n"%s"\n' % split)
    retraw = recvuntil(split)
    return list(x[2:] for x in retraw.decode().strip().strip("\x00").splitlines()[:-3])

def list_rooms():
    rooms_raw = cmd('> for room in hosts["conference.{{ inventory_hostname }}"]["modules"]["muc"].all_rooms() do print(room["jid"]); end')
    rooms = []
    for room_raw in rooms_raw:
        if not room_raw.startswith("org.jitsi.jicofo.rest.health-"):
            rooms.append(room_raw)
    return rooms

def get_room(room):
    if '@' not in room:
        room += "@conference.{{ inventory_hostname }}"
    if not room in list_rooms():
        raise Exception("Room does not exist")

    room_raw = cmd('> for room_jid, occupant in pairs(hosts["conference.{{ inventory_hostname }}"]["modules"]["muc"].get_room_from_jid("%s")["_occupants"]) do for fulljid, presence in pairs(occupant["sessions"]) do print(room_jid, occupant["role"], fulljid, presence); end; end' % room)
    nicks = []
    for line in room_raw:
        room_jid, role, fulljid, presencexml = line.split(None, 3)
        if fulljid.startswith("focus@"):
            continue
        try:
            presence = xmltodict.parse(presencexml)['presence']
            nick = None
            if 'nick' in presence and '#text' in presence['nick']:
                nick = presence['nick']["#text"]
            else:
                nick = "unnamed-%s" % room_jid.split("/")[1]
            nicks.append({'nick': nick, 'room_jid': room_jid, 'presence': presence, 'fulljid': fulljid, 'role': role})
        except:
            traceback.print_exc()
    return nicks

def set_affiliation(room, jid, role):
    if '@' not in room:
        room += "@conference.{{ inventory_hostname }}"
    c = 'muc:room("%s"):set_affiliation(true, "%s", "%s")' % (room, jid, role)
    print(c)
    cmd(c)

def grant_owner(room, nick, onlyone=False):
    users = get_room(room)
    for user in users:
        if user['nick'] == nick:
            set_affiliation(room, user['fulljid'].split("/")[0], "owner")
        elif onlyone:
            set_affiliation(room, user['fulljid'].split("/")[0], "member")

def revoke_owner(room, nick):
    users = get_room(room)
    for user in users:
        if user['nick'] == nick:
            set_affiliation(room, user['fulljid'].split("/")[0], "member")

def usage():
    print("Usage: %s [list/occupants/grant/revoke/onlyone] [?ROOM] [?NICK]" % sys.argv[0])
    print("")
    print("%s list                         list active rooms" % sys.argv[0])
    print("%s occupants [room]             list room occupants" % sys.argv[0])
    print("%s grant [room] [nick]          grant ownership for nick" % sys.argv[0])
    print("%s revoke [room] [nick]         revoke ownership for nick" % sys.argv[0])
    print("%s onlyone [room] [nick]        grant ownership for nick and revoke for anyone else" % sys.argv[0])
    sys.exit(1)

if len(sys.argv) < 2:
    usage()
elif sys.argv[1] == "list":
    rooms = list_rooms()
    print("%d active rooms:" % len(rooms))
    for room in rooms:
        print("- %s" % room.split("@")[0])
elif sys.argv[1] == "occupants":
    room = get_room(sys.argv[2])
    print("%d occupants in %s" % (len(room), sys.argv[2]))
    for occupant in room:
        print("- %s (%s)" % (occupant['nick'] if occupant['nick'] else occupant['fulljid'], occupant['role']))
elif sys.argv[1] == "onlyone":
    grant_owner(sys.argv[2], sys.argv[3], True)
    print("Done!")
elif sys.argv[1] == "grant":
    grant_owner(sys.argv[2], sys.argv[3])
    print("Done!")
elif sys.argv[1] == "revoke":
    revoke_owner(sys.argv[2], sys.argv[3])
    print("Done!")
else:
    usage()
